@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using PishgamanTask.Maui.Authentication
@using PishgamanTask.Maui.Dtos
@using PishgamanTask.Maui.Services


@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager


@inject IJSRuntime js

<h3>Login</h3>

<div class="container">
	<div class="row">
		<div class="col-md-6">
			@if (!string.IsNullOrEmpty(Message))
			{
				<div class="alert alert-warning mb-3">@Message</div>
			}
			<EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="card-header">Login</div>
				<div class="card-body">
					@* Username *@
					<div class="form-group mb-3">
						<input @bind="LoginModel.UserName"
							   class="form-control"
							   placeholder="Username">
						</input>
					</div>

					@* Password *@
					<div class="form-group">
						<div class="input-group mb-3">
							<input class="form-control"
								   @bind="LoginModel.Password"
								   placeholder="Password"
								   type="Password"
								   aria-label="Password"
								   aria-describedby="Password">
						</div>
					</div>

				</div>
				<div class="card-footer">
					<button class="btn btn-primary float-end"
							type="submit">
						Login
					</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	public LoginDto LoginModel { get; set; } = new();
	string? Message = string.Empty;

	async Task LoginAsync()
	{
		var result = await accountService.LogInAccountAsync(LoginModel);
		if (result.flag)
		{
			var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
			await customAuthStateProvider.UpdateAuthenticationState(result.token);
			NavManager.NavigateTo("/", forceLoad: true);
		}
		else
		{
			Message = result.Message;
		}
	}
}
